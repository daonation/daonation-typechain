/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DaonationInterface extends utils.Interface {
  functions: {
    "addGovernanceTokenRewards(uint256)": FunctionFragment;
    "availableRewards()": FunctionFragment;
    "donate(uint256,uint256)": FunctionFragment;
    "donationPeriod()": FunctionFragment;
    "donationToken()": FunctionFragment;
    "proposalLockPeriod()": FunctionFragment;
    "proposeVaquinha(string,uint256,address)": FunctionFragment;
    "redeemDonations(uint256)": FunctionFragment;
    "tokensToCreateProposal()": FunctionFragment;
    "unlockTokens(uint256)": FunctionFragment;
    "vaquinhaByProposal(uint256)": FunctionFragment;
    "vaquinhas(uint256)": FunctionFragment;
    "vaquinhasCount()": FunctionFragment;
    "votationPeriod()": FunctionFragment;
    "votationToken()": FunctionFragment;
    "votationTokenRewardRatio()": FunctionFragment;
    "voteAgainstVaquinha(uint256,uint256)": FunctionFragment;
    "voteForVaquinha(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addGovernanceTokenRewards"
      | "availableRewards"
      | "donate"
      | "donationPeriod"
      | "donationToken"
      | "proposalLockPeriod"
      | "proposeVaquinha"
      | "redeemDonations"
      | "tokensToCreateProposal"
      | "unlockTokens"
      | "vaquinhaByProposal"
      | "vaquinhas"
      | "vaquinhasCount"
      | "votationPeriod"
      | "votationToken"
      | "votationTokenRewardRatio"
      | "voteAgainstVaquinha"
      | "voteForVaquinha"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addGovernanceTokenRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "availableRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "donationPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeVaquinha",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDonations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToCreateProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaquinhaByProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaquinhas",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaquinhasCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votationPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votationToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votationTokenRewardRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteAgainstVaquinha",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteForVaquinha",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGovernanceTokenRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeVaquinha",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensToCreateProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaquinhaByProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaquinhas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaquinhasCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votationTokenRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteAgainstVaquinha",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForVaquinha",
    data: BytesLike
  ): Result;

  events: {
    "Donation(uint256,address,address,uint256)": EventFragment;
    "DonationRedeemed(uint256,address,uint256)": EventFragment;
    "RewardsAdded(address,uint256)": EventFragment;
    "UnlockedTokens(address,uint256)": EventFragment;
    "VaquinhaProposalCreated(address,uint256)": EventFragment;
    "VoteAgainstVaquinha(uint256,uint256)": EventFragment;
    "VoteForVaquinha(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Donation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonationRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockedTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaquinhaProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteAgainstVaquinha"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteForVaquinha"): EventFragment;
}

export interface DonationEventObject {
  vaquinhaId: BigNumber;
  donor: string;
  donationToken: string;
  donationAmount: BigNumber;
}
export type DonationEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  DonationEventObject
>;

export type DonationEventFilter = TypedEventFilter<DonationEvent>;

export interface DonationRedeemedEventObject {
  vaquinhaId: BigNumber;
  donationsTo: string;
  donationsAmount: BigNumber;
}
export type DonationRedeemedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DonationRedeemedEventObject
>;

export type DonationRedeemedEventFilter =
  TypedEventFilter<DonationRedeemedEvent>;

export interface RewardsAddedEventObject {
  sender: string;
  rewardsAmount: BigNumber;
}
export type RewardsAddedEvent = TypedEvent<
  [string, BigNumber],
  RewardsAddedEventObject
>;

export type RewardsAddedEventFilter = TypedEventFilter<RewardsAddedEvent>;

export interface UnlockedTokensEventObject {
  to: string;
  unlockedAmount: BigNumber;
}
export type UnlockedTokensEvent = TypedEvent<
  [string, BigNumber],
  UnlockedTokensEventObject
>;

export type UnlockedTokensEventFilter = TypedEventFilter<UnlockedTokensEvent>;

export interface VaquinhaProposalCreatedEventObject {
  creator: string;
  vaquinhaId: BigNumber;
}
export type VaquinhaProposalCreatedEvent = TypedEvent<
  [string, BigNumber],
  VaquinhaProposalCreatedEventObject
>;

export type VaquinhaProposalCreatedEventFilter =
  TypedEventFilter<VaquinhaProposalCreatedEvent>;

export interface VoteAgainstVaquinhaEventObject {
  vaquinhaId: BigNumber;
  tokensUsed: BigNumber;
}
export type VoteAgainstVaquinhaEvent = TypedEvent<
  [BigNumber, BigNumber],
  VoteAgainstVaquinhaEventObject
>;

export type VoteAgainstVaquinhaEventFilter =
  TypedEventFilter<VoteAgainstVaquinhaEvent>;

export interface VoteForVaquinhaEventObject {
  vaquinhaId: BigNumber;
  tokensUsed: BigNumber;
}
export type VoteForVaquinhaEvent = TypedEvent<
  [BigNumber, BigNumber],
  VoteForVaquinhaEventObject
>;

export type VoteForVaquinhaEventFilter = TypedEventFilter<VoteForVaquinhaEvent>;

export interface Daonation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DaonationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGovernanceTokenRewards(
      rewardsAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    availableRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    donate(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      donationAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donationPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    donationToken(overrides?: CallOverrides): Promise<[string]>;

    proposalLockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposeVaquinha(
      description: PromiseOrValue<string>,
      expectedValue: PromiseOrValue<BigNumberish>,
      donationsTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemDonations(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokensToCreateProposal(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockTokens(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaquinhaByProposal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaquinhas(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        description: string;
        expectedValue: BigNumber;
        votationEndTimestamp: BigNumber;
        donationEndTimestamp: BigNumber;
        aprovadores: BigNumber;
        detratores: BigNumber;
        donations: BigNumber;
        donationsTo: string;
        donationsRedeemed: boolean;
      }
    >;

    vaquinhasCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    votationPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    votationToken(overrides?: CallOverrides): Promise<[string]>;

    votationTokenRewardRatio(overrides?: CallOverrides): Promise<[number]>;

    voteAgainstVaquinha(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      tokensToUse: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteForVaquinha(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      tokensToUse: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addGovernanceTokenRewards(
    rewardsAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  availableRewards(overrides?: CallOverrides): Promise<BigNumber>;

  donate(
    vaquinhaId: PromiseOrValue<BigNumberish>,
    donationAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  donationToken(overrides?: CallOverrides): Promise<string>;

  proposalLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  proposeVaquinha(
    description: PromiseOrValue<string>,
    expectedValue: PromiseOrValue<BigNumberish>,
    donationsTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemDonations(
    vaquinhaId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokensToCreateProposal(overrides?: CallOverrides): Promise<BigNumber>;

  unlockTokens(
    vaquinhaId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaquinhaByProposal(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaquinhas(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean
    ] & {
      description: string;
      expectedValue: BigNumber;
      votationEndTimestamp: BigNumber;
      donationEndTimestamp: BigNumber;
      aprovadores: BigNumber;
      detratores: BigNumber;
      donations: BigNumber;
      donationsTo: string;
      donationsRedeemed: boolean;
    }
  >;

  vaquinhasCount(overrides?: CallOverrides): Promise<BigNumber>;

  votationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  votationToken(overrides?: CallOverrides): Promise<string>;

  votationTokenRewardRatio(overrides?: CallOverrides): Promise<number>;

  voteAgainstVaquinha(
    vaquinhaId: PromiseOrValue<BigNumberish>,
    tokensToUse: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteForVaquinha(
    vaquinhaId: PromiseOrValue<BigNumberish>,
    tokensToUse: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGovernanceTokenRewards(
      rewardsAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    availableRewards(overrides?: CallOverrides): Promise<BigNumber>;

    donate(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      donationAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    donationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    donationToken(overrides?: CallOverrides): Promise<string>;

    proposalLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    proposeVaquinha(
      description: PromiseOrValue<string>,
      expectedValue: PromiseOrValue<BigNumberish>,
      donationsTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemDonations(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensToCreateProposal(overrides?: CallOverrides): Promise<BigNumber>;

    unlockTokens(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vaquinhaByProposal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaquinhas(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        description: string;
        expectedValue: BigNumber;
        votationEndTimestamp: BigNumber;
        donationEndTimestamp: BigNumber;
        aprovadores: BigNumber;
        detratores: BigNumber;
        donations: BigNumber;
        donationsTo: string;
        donationsRedeemed: boolean;
      }
    >;

    vaquinhasCount(overrides?: CallOverrides): Promise<BigNumber>;

    votationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    votationToken(overrides?: CallOverrides): Promise<string>;

    votationTokenRewardRatio(overrides?: CallOverrides): Promise<number>;

    voteAgainstVaquinha(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      tokensToUse: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteForVaquinha(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      tokensToUse: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Donation(uint256,address,address,uint256)"(
      vaquinhaId?: PromiseOrValue<BigNumberish> | null,
      donor?: PromiseOrValue<string> | null,
      donationToken?: null,
      donationAmount?: null
    ): DonationEventFilter;
    Donation(
      vaquinhaId?: PromiseOrValue<BigNumberish> | null,
      donor?: PromiseOrValue<string> | null,
      donationToken?: null,
      donationAmount?: null
    ): DonationEventFilter;

    "DonationRedeemed(uint256,address,uint256)"(
      vaquinhaId?: PromiseOrValue<BigNumberish> | null,
      donationsTo?: PromiseOrValue<string> | null,
      donationsAmount?: null
    ): DonationRedeemedEventFilter;
    DonationRedeemed(
      vaquinhaId?: PromiseOrValue<BigNumberish> | null,
      donationsTo?: PromiseOrValue<string> | null,
      donationsAmount?: null
    ): DonationRedeemedEventFilter;

    "RewardsAdded(address,uint256)"(
      sender?: null,
      rewardsAmount?: null
    ): RewardsAddedEventFilter;
    RewardsAdded(sender?: null, rewardsAmount?: null): RewardsAddedEventFilter;

    "UnlockedTokens(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      unlockedAmount?: null
    ): UnlockedTokensEventFilter;
    UnlockedTokens(
      to?: PromiseOrValue<string> | null,
      unlockedAmount?: null
    ): UnlockedTokensEventFilter;

    "VaquinhaProposalCreated(address,uint256)"(
      creator?: PromiseOrValue<string> | null,
      vaquinhaId?: PromiseOrValue<BigNumberish> | null
    ): VaquinhaProposalCreatedEventFilter;
    VaquinhaProposalCreated(
      creator?: PromiseOrValue<string> | null,
      vaquinhaId?: PromiseOrValue<BigNumberish> | null
    ): VaquinhaProposalCreatedEventFilter;

    "VoteAgainstVaquinha(uint256,uint256)"(
      vaquinhaId?: PromiseOrValue<BigNumberish> | null,
      tokensUsed?: null
    ): VoteAgainstVaquinhaEventFilter;
    VoteAgainstVaquinha(
      vaquinhaId?: PromiseOrValue<BigNumberish> | null,
      tokensUsed?: null
    ): VoteAgainstVaquinhaEventFilter;

    "VoteForVaquinha(uint256,uint256)"(
      vaquinhaId?: PromiseOrValue<BigNumberish> | null,
      tokensUsed?: null
    ): VoteForVaquinhaEventFilter;
    VoteForVaquinha(
      vaquinhaId?: PromiseOrValue<BigNumberish> | null,
      tokensUsed?: null
    ): VoteForVaquinhaEventFilter;
  };

  estimateGas: {
    addGovernanceTokenRewards(
      rewardsAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    availableRewards(overrides?: CallOverrides): Promise<BigNumber>;

    donate(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      donationAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    donationToken(overrides?: CallOverrides): Promise<BigNumber>;

    proposalLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    proposeVaquinha(
      description: PromiseOrValue<string>,
      expectedValue: PromiseOrValue<BigNumberish>,
      donationsTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemDonations(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokensToCreateProposal(overrides?: CallOverrides): Promise<BigNumber>;

    unlockTokens(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaquinhaByProposal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaquinhas(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaquinhasCount(overrides?: CallOverrides): Promise<BigNumber>;

    votationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    votationToken(overrides?: CallOverrides): Promise<BigNumber>;

    votationTokenRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    voteAgainstVaquinha(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      tokensToUse: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteForVaquinha(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      tokensToUse: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGovernanceTokenRewards(
      rewardsAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    availableRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donate(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      donationAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donationPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donationToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalLockPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeVaquinha(
      description: PromiseOrValue<string>,
      expectedValue: PromiseOrValue<BigNumberish>,
      donationsTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemDonations(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokensToCreateProposal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockTokens(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaquinhaByProposal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaquinhas(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaquinhasCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votationPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votationToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votationTokenRewardRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteAgainstVaquinha(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      tokensToUse: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteForVaquinha(
      vaquinhaId: PromiseOrValue<BigNumberish>,
      tokensToUse: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
